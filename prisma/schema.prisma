// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  Iluminacion
  Semillas
  Fertilizantes
  Carpas
  Turbinas
  Sustratos
  Preventivos
  Macetas
  Parafernalia
  Herramientas
}

enum Role {
  user
  admin
  superAdmin
}



model Product {
  id           String         @id @default(uuid())
  description  String
  inStock      Int
  price        Float          @default(0)
  slug         String         @unique
  tags         String[]       @default([])
  category     Category
  title        String
  ProductImage ProductImage[]
  OrderItem    OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  emeilVerified DateTime?
  password      String
  role          Role        @default(user)
  image         String?
  address       UserAddres?
  Order         Order[]
}

model UserAddres {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  //Relaciones
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

//Order de compras

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relaciones 
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  //Metodos de pago
  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  //Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  //Relaciones

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
